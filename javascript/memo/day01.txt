자바스크립트 (Javascript)

자바스크립트 언어란?
	1. 퍼즐 조각처럼 코드 형태로 HTML 페이지에 내장된다. 
	2. 컴파일 과정 없이 브라우저 내부의 자바스크립트 처리기
	(인터프리터)에 의해 실행된다. 
	※ 별도의 컴파일 과정없으므로 JS문법을 잘못썻다고 실행이 안되지 않는다. 실행된다!
	웹사이트 실행 후 개발자 모드 콘솔창에서 오류를 확인할 수 있다. 
	HTML 콘솔은 사용자와 브라우저가 소통한 결과가 나오는 창이다.
	
	[index.html]					자바스크립트 처리기
	<script>				->					->  결과 출력
		자바 스크립트 코드	        브라우저 인터프리터	
	</script>			        컴파일없이 바로실행

웹 페이지에서 자바스크립트의 역할
	웹 페이지는 3가지 코드(HTML, CSS, JS)가 결합되어 작성된다. 
	(HTML은 정보 CSS은 디자인 JS는 연산)
	자바스크립트는 사용자의 입력을 처리하거나 웹 애플리케이션을 작성하는 등
	웹 페이지의 동적 제어에 사용된다. 

	<JS 대표적 역할 5가지>
	- 사용자의 입력 및 계산
		HTML 폼은 입력 창만 제공하고
		키, 마우스의 입력과 계산은 오직 자바스크립트로만 처리가 가능하다.

	- 웹 페이지 내용 및 모양의 동적제어 (DOM)
		HTML태그의 속성이나 콘텐츠, CSS속성 값을 변경하여
		웹 페이지에 동적인 변화를 일으키는 데에 활용된다. 

	- 브라우저 제어 (BOM)
		브라우저 윈도우의 크기나 모양 변경, 새 윈도우나 탭 열기, 다른 웹사이트 접속
		브라우저의 히스토리 제어 등 브라우저의 작동을 제어하는 데 활용된다. 		

	- 웹 서버와의 통신 (Ajax)
		웹 페이지가 웹 서버와 데이터를 주고 받을 때 활용된다.
		Ajax는 동기식이다. (동기화)
		Asynchronized Javascript and Xml 의 약자가 Ajax다. 

	- 웹 애플리케이션 작성 (API 작성 및 추가)
		자바 스크립트 언어로 활용할 수 있는 많은 API를 제공하므로,
		웹 브라우저에서 실행되는 다양한 웹 애플리케이션을 개발할 수 있다.


※JS는 10일만에 만들어졌고, 그래서 체계적이기보다 효율적으로 만들었다.
우리는 JS 5버전을 사용할것임
------------------------------------------------------------------------------------------------------------
자바스크립트 코드의 위치
	1. HTML 태그의 이벤트 리스너 속성에 작성
		HTML태그에는 마우스가 클릭되는 등 이벤트가 발생할 때 처리하는 코드를
		등록하는 리스너 속성이 있다. 이 속성에 자바스크립트 코드를 작성할 수 있다.

	2. <script></script> 내에 작성
		<script></script>는 <head></head>, <body></body>, body태그 밖 등
		어디든 들어갈 수 있다.
		웹 페이지 내에서 여러 번 작성할 수 있다. 

	3. 자바스크립트 파일에 작성 (외부파일)
		자바스크립트 코드를 확장자가 .js인 별도의 파일로 저장하고,
		<script src=".js경로"></script>를 통해 불러서 사용한다. 

	4. URL부분에 작성
		<a> 태그의 href속성 등에도 자바스크립트 코드를 작성할 수 있다.
------------------------------------------------------------------------------------------------------------
자바스크립트로 HTML 콘텐츠 출력 (JSP에서도많이씀)
	자바스크립트 코드로 HTML 콘텐츠를 웹 페이지에 직접 삽입하여
	브라우저 윈도우에 출력되게 할 수 있다. 
	이 때 document.write()혹은 document.writeln()을 사용한다. 
	자바스크립트 안에 html을 넣는것이다.

	※ writeln()은 줄바꿈(\n)문자가 삽입된다. 하지만 HTML에서 줄바꿈으로 <br>을 쓰므로
	줄바꿈으로 표현되지 않는다.!
	※ <pre>태그를 여러번의 공백과 활용해주면 개행문자가 인식된다. 

--------------------------------------------------------------------------------------------------------------
자바스크립트 다이얼로그 : 사용자 입력 및 메세지 출력
	사용자에게 메세지를 출력하거나, 입력을 받을 수 있는 3가지 다이얼로그가 있다.

	- 프롬프트 다이얼로그
		prompt("메세지", "디폴트 입력값");

		디폴트 입력값은 생략이 가능하다. 
		사용자가 입력한 문자열 값을 리턴하지만
		아무 값도 입력되지 않으면 ""를 리턴, 취소나 강제로 닫으면 null을 리턴한다. 

	- 확인 다이얼로그
		confirm("메세지");

		확인/취소 버튼을 가진 다이얼로그를 출력한다.
		확인은 true, 취소 혹은 강제로 닫을 시 false를 리턴한다.
	
	- 경고 다이얼로그
		alert("메세지")

		메세지 출력

-------------------------------------------------------------------------------------------------------------------
데이터 타입과 변수
	1. 자바스크립트 식별자
	
	식별자 (identifier)란 자바스크립트 개발자가 변수, 상수, 함수에
	붙이는 이름이다. 즉 이름! 을 말한다.
	식별자를 만들 때 다음 규칙을 준수해야한다.
	
	- 첫 번째 문자 : 알파벳, 언더바, $문자만 사용 가능
		※$로 시작되는 식별자는 jQuery 객체를 나타낸다는 의미이다. 
	- 두 번째 이상 문자 : 알파벳, 언더바, 0-9, $ 사용 가능
	- 대소문자 구분 : data와 dAta는 다른 식별자다. 

	6variable		(x)
	student_ID	(o)
	_code		(o) : 언더바로 시작하는 이름은 좋지 않다. 
	if 		(x) : 키워드 사용 불가
	%calc		(x) : %사용불가
	bar		(o) 

	2. 문장 구분
	
	세미콜론으로 문장과 문장을 구분한다.
	한 줄에 한 문장만 있는 경우 세미콜론을 생략할 수 있다.

	i = i + 1			(o)
	j+ j + 1 ;			(o)
	k = k + 1; m = m + 1; 	(o)
	n = n+1 p = p+1 		(x)

	3. 주석
	//한줄 주석
	/* */ 범위 주석

	4. 데이터 타입
	
	- 숫자 타입 (Number) : 40, 132.4566, .....

	- 논리 타입 : true, false

	- 문자열 타입 : '안녕', "a", .... 작은 따옴표 큰따옴표 모두다 문자열임

	- 객체 레퍼런스 타입 (Object) : 객체를 가리킴. C언어 포인터와 유사 

	- undefined, null
		undefined : 타입이 정해지지 않은 것을 의미 
			var data; (JS는 값이 들어가야 타입이 정해진다.)
		null : 값이 정해지지 않은 것을 의미
			-> 초기값으로 설정 가능

		※ undefined는 초기화 되지 않은 변수가 존재하지 않는 값에 접근할 때 반환된다. 
				(선언한적도 없는 변수를 출력하려고할때 등..)

	5. 변수
	
	- var 키워드로 변수를 선언한다. 
		var score;		// undefined라는 값으로 초기화
		var year, month, day;	// 3개의 변수를 한 번에 선언 가능
		var address = "서울시";	// 문자열 타입

	- var 키워드 없이 변수를 선언한다.
		age = 20; 		//이미 age가 선언된 변수라면 존재하는 age 값 수정
					//없다면 이렇게도 변수가 선언되긴 한다. 비추함.
		※var로 변수를 선언하는것이 명료하고 , 실수를 막을 수 있다. 

	- 변수의 특징
		타입이 정해진 상태로 할당되지 않기 때문에 어떠한 타입의 값이라도
		하나의 변수에 담을 수 있다. 

		data = 10;
		data ="한동석";  이게 가능함~!


	- 지역변수와 전역변수

		변수의 사용범위 (scope)에 따라서 전역변수(global)와 지역변수(local)로 나뉜다.
		
		전역 변수 : 함수 밖에서 선언되거나 함수 안에서 var 키워드 없이 선언.

		지역 변수 : 함수 안에서 var키워드로 선언. 선언된 함수 내에서만 사용 가능. 

		var x ;	//전역

		function f () {
			var y ;	//지역
			x = 10;	//전역 (위에서 x가 선언됬잖수)

			y = 10;	//지역
			z = 10;	//전역 (var로 선언안했기 때문에 전역변수다 조심해야함. 이렇게안씀!)
		}

	-this로 전역변수 접근 

		var x ;	//전역변수
	
		function f () {
			var x ; 	//지역 변수
			x = 1;	//지역 변수

			this.x = 100 ; //전역 변수
		}	


	6. 상수
		let : 재할당 가능
		const : 재할당 불가능

		*var
		var a = 'test';
		var a = 'test2';
		c = 'test';
		var c;

		*let (재할당 가능. 재선언은 불가. 값의 수정은 가능. )
		let a = 'test'
		let a = 'test2' 	: 오류
		a = 'test3' 	: 가능		
		
		*const
		const b = 'test';
		const b = 'test2'; 	: 오류
		b = 'test3' 	: 오류

		※const가 원래 java에서 쓰던 상수의 의미이고 let은 js에만 있는 상수다. 

		<let 을 사용하는 이유>

			//for(var i = 0 ; i<10; i++) {
			for(let i = 0; i<10; i++) {
				console.log(i + 1);
			}
	
			console.log(i);

		var로 선언하게 되면 for문 밖에서도 사용이 가능하다. (변경될 가능성 있음)
		let으로 선언하게 되면 해당 지역 밖에서는 사용할 수 없다. (변경 혹은 사용시 오류)

-------------------------------------------------------------------------------------------
함수
	function 식별자 (arg1, arg2, .... argn) {
		코드 작성
		return 리턴 값;
	}

	function : 함수 선언 표시
	식별자 : 함수명 (동사로 작성)
	매개변수 : 여러 개 있을 때 콤마로 분리하고, 생략도 가능.
	return : 함수의 실행 종료 후 리턴 값을 반환. 

	※JS에서는 매개변수로 함수도 들어갈 수 있다. 함수 하나가 객체로 표현이된다. 
		-> 콜백 함수 라고 한다. (call back function)
	나중에 스프링할때 배울것임


--------------------------------------------------------------------------------------------
자바 스크립트의 전역 함수
	- parseInt()
		문자열을 숫자로 변환한다. 
		parseInt("32") === 32 (자바스크립트에서 ===연산은 타입과 값 모두 같은 지 비교)

	- isNaN ()
		숫자가 아니면 true, 숫자이면 false;
		NaN은 숫자가 아님을 나타내는 상수 키워드이다. NaN이라는 것도 값이다.

		isNan(32) : false
		isNaN("32") : false (이것도 숫자로 판단한다. 이걸 조심해야함)
		isNaN("hello") : true
		isNaN(NaN) : true

	- isFinite()
		숫자면 true, 아니면 false (isNaN()과 반대임)

	- eval()
		문자열 형태로 수식을 전달 받아서 수식을 계산한다. 

		ex>
		eval("2*3+4+6") == 30

-------------------------------------------------
자바스크립트 객체 (프로터피, JSON)

DOM - 실습
BOM
웹 표준 (HTML, CSS, JS) 전체 예제 및 실습
프론트 개인 프로젝트 진행


















