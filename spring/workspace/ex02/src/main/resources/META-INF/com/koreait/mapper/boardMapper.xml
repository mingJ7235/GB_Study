<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.koreait.mapper.BoardMapper">
	<select id="getList" resultType="com.koreait.domain.BoardVO">
		<![CDATA[
			SELECT * FROM TBL_BOARD WHERE BNO > 0
		]]>
	</select>
	
	<!-- 동적쿼리를 include처럼 재사용의 목적으로 사용하는법 -->
	<sql id="criteria">
	<!-- [3] -->
	<!-- Mapper 인터페이스로부터 전달받은 Criteria객체안의 type과 keyword둘다 null이 아니라면 -->
		<if test="type != null and keyword != null"> <!-- 즉 검색했을 때!  -->
			<!-- [7] -->
			<!-- trim 태그 안에 있는 쿼리문을 기준으로 가장 앞에 있는 OR을 없애준다.  -->
			<!-- trim 태그 안에 있는 쿼리문 뒤에는 페이징 처리 조건식이 한개 더 있기 때문에 마지막에 (suffix) AND를 붙여준다.  -->
			<trim prefix="(" suffix=") AND" prefixOverrides="OR"> <!-- 맨 앞의 or을 제거해주기 위함이다.  -->
			<!-- [4] -->
			<!-- Criteria에 선언된 getTypeArr() 메소드를 호출하여 단일항목이 들어있는 배열의 길이만큼 반복해준다. -->
			<!-- 각각의 단일 항목들이 item속성에 있는 type변수에 들어가게 된다.  -->
			<!-- 예: "TW"는 2칸 문자열 배열이며, 2번 반복된다. Criteria.java의[2]번 참조--> 
				<foreach item="type" collection="typeArr">
					<!-- [6] -->
					<!-- 작성된 쿼리문마다 맨 앞에 (prefix) OR을 붙여준다.  -->
					<trim prefix="OR">
					<!-- [5] -->
					<!-- 단일 항목 중 조건식이 참이라면 알맞는 쿼리문이 작성된다. -->
						<choose>
							<when test="type=='T'.toString()">
								(TITLE LIKE '%'||#{keyword}||'%')
							</when>
							<when test="type=='C'.toString()">
								(CONTENT LIKE '%'||#{keyword}||'%')
							</when>
							<when test="type=='W'.toString()">
								(WRITER LIKE '%'||#{keyword}||'%')
							</when>
						</choose>
					</trim>
				</foreach>
			</trim>
		</if>
	</sql>
	
	<select id="getListWithPaging" resultType="com.koreait.domain.BoardVO">
		SELECT BNO, TITLE, CONTENT, WRITER, REGDATE, UPDATEDATE, REPLYCNT 
		FROM 
			(SELECT /*+ INDEX_DESC(TBL_BOARD PK_BOARD) */ ROWNUM RN, BNO, TITLE, CONTENT, WRITER, REGDATE, UPDATEDATE, REPLYCNT 
			FROM TBL_BOARD 
			WHERE 
			<include refid="criteria"/> <!-- sql태그를 사용해서 동적쿼리를 재사용하기위해 사용한다.  -->
		<![CDATA[	
			ROWNUM <= #{pageNum} * #{amount}) 
		WHERE RN > (#{pageNum} - 1) * #{amount}
		]]>
	</select>
	
	
	
	
	<!-- 검색된 게시물의 전체 개수 -->
	<!-- * 은 너무 느리다. 그래서 컬럼을 쓸때 다 일일이 써주는것이 좋다. *는 잘 안쓰는것이다. 테스트할때만 사용한다. 컬럼명을 다 적어준다.  -->
	<!--검색된 게시물의 전체 개수를 파악해주는 첫번째 방법  criteria에있는 and를 없애줄 생각을 해야한다. -->
 	<select id="getTotal" resultType="_int">
		SELECT COUNT(BNO) FROM TBL_BOARD 
		<where>
			<trim suffixOverrides="AND"> 
				<include refid="criteria"/> 
			</trim>
		</where>
	</select> 
 	
 	<!-- <select id="getTotal" resultType="_int">
		SELECT COUNT(BNO) FROM TBL_BOARD 
		<include refid="criteria"/>
		<![CDATA[BNO > 0]]> 
	</select> 검색된 게시물의 전체개수를 파악해주는 두번째 방법 -->
	
	<insert id="insert">
		INSERT INTO TBL_BOARD (BNO, TITLE, CONTENT, WRITER) 
		VALUES(SEQ_BOARD.NEXTVAL, #{title}, #{content}, #{writer})
	</insert>
	
	<!-- selectKey테그가 먼저 실행되어야하므로 before를 넣어주는것이다.
		selectKey에서 bno를 셀렉해주고, 이걸 밑의 insert문의 #{bno}자리에 넣어주는것이다.
		select먼저하고 bno라는 필드에 값을 집어넣고, 그다음에 다시 insert문으로 하는것이다. 
		
		이방법은 ! 
		PK값을 미리 SQL을 통해서 처리해 두고 지정한 이름으로 결과를 보관하는 방식이다.
		SQL을 한 번 더 실행하는 부담이 있기는 하지만 자동으로 추가되는 PK값을 확인해야 하는 상황에서는
		유용하게 사용될 수 있다. 
		
	 -->
	<insert id="insertSelectKey_bno">
		<selectKey keyProperty="bno" order="BEFORE" resultType="long">
			SELECT SEQ_BOARD.NEXTVAL FROM DUAL
		</selectKey>
		INSERT INTO TBL_BOARD (BNO, TITLE, CONTENT, WRITER) 
		VALUES(#{bno}, #{title}, #{content}, #{writer})
	</insert>
	
	<select id="read" resultType="com.koreait.domain.BoardVO">
		SELECT * FROM TBL_BOARD WHERE BNO = #{bno}
	</select>
	
	<delete id="delete">
		DELETE FROM TBL_BOARD WHERE BNO = #{bno}
	</delete>
	
	<update id="update">
		UPDATE TBL_BOARD 
		SET TITLE = #{title}, CONTENT = #{content}, WRITER = #{writer}, UPDATEDATE = SYSDATE
		WHERE BNO = #{bno}
	</update>
	
	<update id="updateReplyCnt">
		UPDATE TBL_BOARD 
		SET REPLYCNT = REPLYCNT + #{amount}
		WHERE BNO = #{bno}
	</update>
</mapper>
