<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.3.xsd">
	
	<!-- Exam exam = new NewlecExam(); -->
		
	<!-- 1. setter로 초기화하는 방법 
	<bean id="exam" class="springNewLecture.di.entity.NewlecExam">
			 <property name="kor">
			<value>40</value>
		</property>
		<property name="eng" value="30"/>
		<property name="math" value="30"/>
		<property name="com" value="20"/> 
	
	</bean>	
	-->
	<!--  
	2. 생성자로 초기화하는 방법 
		생성자의 매개변수의 순서대로 값을 세팅하는 것이다. 
		인덱스를 주어서 이렇게 설정할수도있다.
		name을 주어서 지정할 수있다. 이게 명확하고 보편적이다.
		type을 거론하여 지정할 수 도있다.
		
	<bean id="exam" class="springNewLecture.di.entity.NewlecExam">
		<constructor-arg name="kor" value="10"/>
		<constructor-arg name="eng" type="int" value="30"/>
		<constructor-arg index="2" value="40"/>
		<constructor-arg index="3" value="50"/>
	</bean>
	-->
	
	<!-- 3. 처리기를 사용하여 간편하게 생성자로 초기화하는 방법. 
		아래의 Namespaces에서 P를 추가시켜주면 위에 xmlns:p="http://www.springframework.org/schema/p"설정이
		추가되어 사용할 수 있게된다.
		Namespaces : 이름이라는 것을 식별하기 위해서 붙여진 확장된 Namespaces라고 이해하면된다.
			즉, 접두사인데, 그 접두사를 관리하는 처리기만 특정지어줘서 그것만 처리할수있도록한다. 
			p로 관리하여 생성자로 초기하는 방법이다. 
	-->
	<bean id="exam" class="springNewLecture.di.entity.NewlecExam" 
		p:kor="10" p:eng="20" p:math="30" p:com="50"/>
	
	<!-- ExamConsole console = new GridExamConsole(); -->
	<bean id="console" class="springNewLecture.di.ui.InlineExamConsole">
		<!-- console.setExam(exam); -->
		<!-- setExam을 호출하는 것인데 묵시적으로 set을 생략해준다. setExam이 exam으료 바뀐것 -->
		<!-- ref : 위에서 bean으로 추가해놓은 exam객체가 참조형이므로 ref에값에 exam을 넣는것 -->
		<!-- 두개의  exam은 모두 다르다!!  -->
		<property name="exam" ref="exam"/>	
	</bean>
	
	<!-- <bean id="exams" class="java.util.ArrayList">
		ArrayList의 생성자에 collection을 담을 수 있는 것을 이용하여
			setter를 사용하지 못하므로 생성자로 add 메소드를 생성해준다. 
		
		<constructor-arg>
			컬렉션이므로 list태그를 연다
			<list>
				1) 직접 이렇게 bean을 열어서 생성할수도있고
				<bean class="springNewLecture.di.entity.NewlecExam" 
						p:kor="1" p:eng="2" p:math="3" p:com="5"/>
				2) 이렇게 참조해서 위에서 만든 exam 을 가져다 쓸수도있다. (42번줄)
				<ref bean ="exam"/>
			</list>
		</constructor-arg>
	</bean> -->
	
	
	<!-- 그런데 위와같이 (56~70) 컬렉션은 항상 생성자에 또다른 컬렉션을 추가하여 생성해야하는가?
		아니다. Namespaces에서 util을 체크하여 
		xmlns:util="http://www.springframework.org/schema/util"을 활성화하여 사용
	 -->
	<!-- 실제로 객체를 만들어주는 util을 사용하여 선언할수있다. -->
	<util:list id="exams" list-class="java.util.ArrayList"> 
		<bean class="springNewLecture.di.entity.NewlecExam" 
				p:kor="1" p:eng="2" p:math="3" p:com="5"/>
		<ref bean ="exam"/>
	</util:list>
	
</beans>













