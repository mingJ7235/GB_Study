<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.3.xsd">
	
	<bean id="target" class="springNewLecture.aop.entity.NewlecExam" 
		p:kor="12" p:eng="1" p:math="1" p:com="1"/>
	<bean id="logAroundAdvice" class="springNewLecture.aop.advice.LogAroundAdvice"/><!-- log를 출력하기 위한  advice 즉, 핸들러--> 
	<bean id="logBeforeAdvice" class="springNewLecture.aop.advice.LogBeforeAdvice"/>
	<bean id="logAfterReturningAdvice" class="springNewLecture.aop.advice.LogAfterReturningAdvice"/>
	<bean id="logAfterThrowingAdvice" class="springNewLecture.aop.advice.LogAfterThrowingAdvice"/>
	
	<!-- 클래식한 포인트컷 bean을 생성한다. 
		원하는 타겟만 위빙을 하기위해서 포인트컷하는것이다.
	-->
	<!-- <bean id="classicPointCut" class="org.springframework.aop.support.NameMatchMethodPointcut">
		<property name="mappedName" value="total"/> total() 메소드만 사용하고싶을때 이렇게 포인트컷
	</bean>
	
	pointcut과 advice를 연결해주는것이 advisor다.
	<bean id="classicBeforeAdvisor" class="org.springframework.aop.support.DefaultPointcutAdvisor">
		advice는 setAdvice(), pointcut은 setPointcut()이라는 메소드를 호출하는 것이다.
			정해진 것 ! 
			ref에는 그 setter를 무엇을 참조할것인지를 담는것이다. 
		 
		<property name="advice" ref="logBeforeAdvice"/>
		<property name="pointcut" ref="classicPointCut"/>
	</bean> -->
	
<!-- 	<bean id="classicAroundAdvisor" class="org.springframework.aop.support.DefaultPointcutAdvisor">
		<property name="advice" ref="logAroundAdvice"/>
		<property name="pointcut" ref="classicPointCut"/>
	</bean> -->
	
	
	<!-- 포인트컷과 어드바이저를 합친다.  -->
	
	<!-- <bean id="classicBeforeAdvisor" class="org.springframework.aop.support.NameMatchMethodPointcutAdvisor">
		<property name="advice" ref="logBeforeAdvice"/>
		<property name="mappedNames">
			이렇게 리스트를 줘서 사용할 메소드에 어드바이저를 붙일 수 있다.
			<list>
				<value>total</value>
				<value>avg</value>
			</list>
		</property>
	</bean> -->
	
	<!-- Regexp를 사용하면 정규식을 사용해서 패턴으로 사용가능하다. 
		이때는 프로퍼티 name을 patterns를 줘서 할 수있다. 
	-->
	<bean id="classicBeforeAdvisor" class="org.springframework.aop.support.RegexpMethodPointcutAdvisor">
		<property name="advice" ref="logBeforeAdvice"/>
		<property name="patterns">
			<list>
				<value>.*to.*</value> <!-- 메서드 이름중에서 to가 들어간걸 모두 찾아서 어드바이스 설정을 할 수있다.-->
			</list>
		</property>
	</bean>
	
	<bean id="classicAroundAdvisor" class="org.springframework.aop.support.NameMatchMethodPointcutAdvisor">
		<property name="advice" ref="logAroundAdvice"/>
		<property name="mappedName" value="total"/>
	</bean>
	
	<bean id="exam" class="org.springframework.aop.framework.ProxyFactoryBean">
		<!-- proxy에는 두가지 설정이 필요하다.
			실제 타겟의 객체,
			그 타겟의 곁다리 업무 (InvocationHandler)
		 -->
		 
		 <!-- setter로 설정 -->
		 <property name="target" ref="target"/> <!-- 1. 타겟에 대한 설정 -->
		 <property name="interceptorNames"> <!-- 2. 곁다리 업무에 관한, 즉 advice에 대한 설정 -->
		 	<list>
		 		<!-- advice를 list로 이렇게 설정해줄 수 있다. -->
		 		<value>classicAroundAdvisor</value>
		 		<value>classicBeforeAdvisor</value> <!-- 이곳에 advisor를 설정하는것 -->
		 		<value>logAfterReturningAdvice</value>
		 		<value>logAfterThrowingAdvice</value>
		 	</list>
		 </property>
		 
	</bean>
	
	
	
	
</beans>













