스프링 프레임워크

[학습 목표]
	- 스프링 프레임워크를 이용해서 '의존성 주입'에 대한 이해와 테스트
	- 스프링에서 XML을 이용하는 객체 관리 방법
	- 스프링의 테스트 환경 구축

프레임워크란?
	(MyBatis, 컬렉션 -> 우리가 지금까지 배운 프레임워크)

	뼈대나 근간을 이루는 코드들의 묶음. 
	개발자는 각 개개인의 능력차이가 큰 직종이고, 개발자 구성에 따라 프로젝트 결과 역시 큰 차이를 낳는다.
	이런 상황을 극복하기 위한 코드의 결과물이 바로 프레임워크이다. 
	프로그램의 기본 흐름이나 구조를 정하고 모든 팀원이 이 구조에 자신의 코드를 추가하는 방식으로
	개발하게 된다. 


프레임워크와 라이브러리의 차
	(자동차 = 프레임워크 / 자동차만드는 연장도구 = 라이브러리)
	프레임워크란 제어의 주체가 개발자가 아닌 프레임워크이고,
	그 안의 여러기능들을 가져다 사용하는 방식이다. 
	만약 수정해야할 때에는 도구들을 사용해서 수정 및 추가가 가능하다. 
	라이브러리는 주체가 개발자이며, 핵심 로직에서 필요한 부분들만 가져다 사용하는 방식이다. 


프레임워크의 장점
	개발에 필요한 구조를 이미 코드로 마들어 놓았기 때문에,
	실력이 부족한 개발자라 하더라도 반쯤 완성한 상태에서 필요한 부분을 
	조립하는 형태의 갭라이 가능하다. 회사입장에서는 프레임워크를 사용하면
	일정한 품질이 보장되는 결과물을 얻을 수 있고, 
	개발자 입장에서는 완성된 구조에 자신이 맡은 코드를 개발해서 넣기 때문에 개발시간을 단축할 수 있다.

스프링 프레임워크란?
	경량 프레임워크 (light-weight).
	예전 프레임워크는 다양한 경우를 처리할 수 있는 다양한 기능을 가지도록 만들다보니
	하나의 기능을 위해서 너무 많은 구조가 필요했다. 
	기술이 너무나 복잡하고 방대했기 때문에, 전체를 이해하고 개발하기에는 어려움이 많았다. 
	그래서 스프링프레임워크가 등장했고, 특정 기능을 위주로 간단한 jar파일등을 이용해서
	모든 개발이 가능하도록 구성되어 있다. 

스프링 프레임워크 장점
	- 복잡함에 반기를 들어서 만들어진 프레임워크
	- 프로젝트 전체 구조를 설계할 때 유용한 프레임 워크
	- 다른 프레임워크들의 포용 (여러 프레임워크를 혼용해서 사용가능)
	- 개발 생산성과 개발 도구의 지원

스프링 프레임워크의 특징
	- POJO 기반의 구성
	- 의존성 주입 (DI)을 통한 객체 간의 관계 구성
	- AOP(Aspect - Oriented - Programming) 지원
	- 편리한 MVC 구조
	- WAS에 종속적이지 않은 개발 환경
	- 트랜잭션 관리 용이 

POJO (Plain Old Java Object) 기반의 구성
	오래된 방식의 간단한 자바 객체라는 의미이며, Java 코드에서 일반적으로
	객체를 구성하는 방식을 스프링 프레임워크에서 그대로 사용할 수 있다는 말이다. 
	(즉, Java를 사용할 수 잇다! 간단하게 말해서 이거다.)

의존성 주입(DI) 를 통한 객체간의 관계 구성
	(중요한 개념)
	DI : Defendency Injection 
	의존성(Defendency)이란 하나의 객체가 다른 객체 없이 제대로 된 역할을 할 수 없다는 것을 의미한다.
	


	예를들어 A객체가 B객체 없이 동작이 불가능한 상황을 'A'가 'B'에 의존적이다. 라고 표현한다.

	주입(Injection)은 말 그대로 외부에서 밀어 넣는 것을 의미한다. 
	예를 들어 어떤 객체가 필요한 객체를 외부에서 밀어 넣는 것을 의미한다. 
	주입을 받는 입장에서는 어떤 객체인지 신경 쓸 필요가 없고 (upcasting) 어떤 객체에 의존하든
	자신의 역할은 변하지 않게 된다. 

	DI를 사용하는 이유는 스프링이 의존성을 주입하여 결합성을 느슨하게 하기 위함이다. 

	** 의존
	ⓐ →→→→→→→→→→→→ ⓑ (a가 b에게 의존)
	a객체에서 b객체를 직접 생성

	** 의존성 주입 (내가 아니라 제3자가 생성해주는것임 즉, 생성을 요청함)
	ⓐ →→→→→→???→→→→→→ ⓑ
	a는 b가 필요하다는 신호만 보내고(요청만 보냄, 직접 생성하면 결합성이 커지므로), b객체를 주입하는 것은
	외부에서 이루어짐. 이런건 IOC라고 한다. 

	의존성 주입 방식을 사용하기 위해서는 ???라는 존재가 필요하게 된다. 
































