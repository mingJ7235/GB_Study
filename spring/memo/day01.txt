스프링 프레임워크

[학습 목표]
	- 스프링 프레임워크를 이용해서 '의존성 주입'에 대한 이해와 테스트
	- 스프링에서 XML을 이용하는 객체 관리 방법
	- 스프링의 테스트 환경 구축

프레임워크란?
	(MyBatis, 컬렉션 -> 우리가 지금까지 배운 프레임워크)

	뼈대나 근간을 이루는 코드들의 묶음. 
	개발자는 각 개개인의 능력차이가 큰 직종이고, 개발자 구성에 따라 프로젝트 결과 역시 큰 차이를 낳는다.
	이런 상황을 극복하기 위한 코드의 결과물이 바로 프레임워크이다. 
	프로그램의 기본 흐름이나 구조를 정하고 모든 팀원이 이 구조에 자신의 코드를 추가하는 방식으로
	개발하게 된다. 


프레임워크와 라이브러리의 차
	(자동차 = 프레임워크 / 자동차만드는 연장도구 = 라이브러리)
	프레임워크란 제어의 주체가 개발자가 아닌 프레임워크이고,
	그 안의 여러기능들을 가져다 사용하는 방식이다. 
	만약 수정해야할 때에는 도구들을 사용해서 수정 및 추가가 가능하다. 
	라이브러리는 주체가 개발자이며, 핵심 로직에서 필요한 부분들만 가져다 사용하는 방식이다. 


프레임워크의 장점
	개발에 필요한 구조를 이미 코드로 마들어 놓았기 때문에,
	실력이 부족한 개발자라 하더라도 반쯤 완성한 상태에서 필요한 부분을 
	조립하는 형태의 갭라이 가능하다. 회사입장에서는 프레임워크를 사용하면
	일정한 품질이 보장되는 결과물을 얻을 수 있고, 
	개발자 입장에서는 완성된 구조에 자신이 맡은 코드를 개발해서 넣기 때문에 개발시간을 단축할 수 있다.

스프링 프레임워크란?
	경량 프레임워크 (light-weight).
	예전 프레임워크는 다양한 경우를 처리할 수 있는 다양한 기능을 가지도록 만들다보니
	하나의 기능을 위해서 너무 많은 구조가 필요했다. 
	기술이 너무나 복잡하고 방대했기 때문에, 전체를 이해하고 개발하기에는 어려움이 많았다. 
	그래서 스프링프레임워크가 등장했고, 특정 기능을 위주로 간단한 jar파일등을 이용해서
	모든 개발이 가능하도록 구성되어 있다. 

스프링 프레임워크 장점
	- 복잡함에 반기를 들어서 만들어진 프레임워크
	- 프로젝트 전체 구조를 설계할 때 유용한 프레임 워크
	- 다른 프레임워크들의 포용 (여러 프레임워크를 혼용해서 사용가능)
	- 개발 생산성과 개발 도구의 지원

스프링 프레임워크의 특징
	- POJO 기반의 구성
	- 의존성 주입 (DI)을 통한 객체 간의 관계 구성
	- AOP(Aspect - Oriented - Programming) 지원
	- 편리한 MVC 구조 (나중에)
	- WAS에 종속적이지 않은 개발 환경 (나중에)
	- 트랜잭션 관리 용이 

1) POJO (Plain Old Java Object) 기반의 구성
	오래된 방식의 간단한 자바 객체라는 의미이며, Java 코드에서 일반적으로
	객체를 구성하는 방식을 스프링 프레임워크에서 그대로 사용할 수 있다는 말이다. 
	(즉, Java를 사용할 수 잇다! 간단하게 말해서 이거다.)

2) 의존성 주입(DI) 를 통한 객체간의 관계 구성
	(중요한 개념)
	DI : Defendency Injection 
	의존성(Defendency)이란 하나의 객체가 다른 객체 없이 제대로 된 역할을 할 수 없다는 것을 의미한다.
	
	예를들어 A객체가 B객체 없이 동작이 불가능한 상황을 'A'가 'B'에 의존적이다. 라고 표현한다.

	주입(Injection)은 말 그대로 외부에서 밀어 넣는 것을 의미한다. 
	예를 들어 어떤 객체가 필요한 객체를 외부에서 밀어 넣는 것을 의미한다. 
	주입을 받는 입장에서는 어떤 객체인지 신경 쓸 필요가 없고 (upcasting) 어떤 객체에 의존하든
	자신의 역할은 변하지 않게 된다. 

	DI를 사용하는 이유는 스프링이 의존성을 주입하여 결합성을 느슨하게 하기 위함이다. 

	** 의존
	ⓐ →→→→→→→→→→→→ ⓑ (a가 b에게 의존)
	a객체에서 b객체를 직접 생성

	** 의존성 주입 (내가 아니라 제3자가 생성해주는것임 즉, 생성을 요청함)
	ⓐ →→→→→→???→→→→→→ ⓑ
	a는 b가 필요하다는 신호만 보내고(요청만 보냄, 직접 생성하면 결합성이 커지므로), b객체를 주입하는 것은
	외부에서 이루어짐. 이런건 IOC라고 한다. 

	의존성 주입 방식을 사용하기 위해서는 ???라는 존재가 필요하게 된다. 
	스프링 프레임워크에서는 ApplicationContext가 바로 ??? 라는 존재이며,
	필요한 객체들을 생성 (메모리에 할당) 하고, 필요한 객체들을 주입해주는 역할을 한다. 
	
	* context -> connection pool 에서 사용했었음 (톰켓에서 context.xml -> 메모리에 임시저장소처럼 미리 할당해놓는것
	연결 허용갯수를 정해놓는것임. 사용자의 요청에 따라 중간에서 올려준다. )

	따라서 개발자들은 기존의 프로그래밍과 달리 객체와 객체를 분리해서 생성하고,
	이러한 객체들을 엮는 (wiring) 작업의 형태로 개발하게 된다. (applicationcontext 더 알아보기)

	ApplicationContext가 관리하는 객체들을 '빈(Bean)' 이라 부르고,
	빈과 빈 사이의 의존 관계를 처리하는 방식으로 XML설정을 하고, 1)어노테이션 설정, 2) Java설정 방식 (1,2중에 하나선택)을 이용할 수 있다. 
	거의 어노테이션 설정을 사용한다. 

	**ApplicatonContext를 통해서 xml이 jvm에 객체를 선언해놓는다.
	이것을 어노테이션을 통해서 불러와서 RAM에 할당한다. (MyBatis 팩토리와 비슷하다!!)
	
3) AOP(Aspect - Oriented - Programming) 지원
	AOP : 관점 지향 프로그래밍 (개발자 관점에서 개발할수 잇도록 하는 관점 지향 프로그래밍)
	좋은 개발 환경에서는 백엔더 개발자가 비지니스로직에만 집중할 수 있게 한다. 
	스프링 프레임워크는 반복적인 코드를 제거해줌으로써 
	핵심 비지니스 로직에만 집중할 수 있는 방법을 제공한다. 
	(반드시 써야하는데 매번하기 번거로운 작업들. log출력, 예외처리, 트랜젝션, 보안 등등을 분리시킨다. -> 횡단관심사)
	
	보안이나 로그, 트랜잭션, 예외 등과 같이 비지니스 로직은 아니지만,
	반드시 처리가 필요한 부분을 '횡단 관심사 (cross-concern)' 이라고 한다. (비지니스 로직은 종단관심사 라고한다.) 
	스프링 프레임워크는 이러한 횡단 관심사를 분리해서 제작하는 것이 가능하고
	횡단 관심사를 모듈(모듈 => 메소드로 분리한다 라는의미) 로 분리하는 프로그래밍을 AOP라고 한다. 
	이를 통해서 3가지의 이점이 생긴다. 

	횡단관심사를 비지니스로직에서 분리시켜서 클래스에서 메소드로 선언한 후에,
	그 위에 어떤 클래스, 어떤 메소드가 실행되면 나도 실행시켜줘! 라고 알려주는 것이다.
	이러면 알아서 횡단관심사가 실행된다.
	이러한 개발환경이 AOP라고 한다. !!

	3가지 이점
	1) 핵심 비지니스 로직에만 집중하여 코드를 개발 할 수 있다.
	2) 각 프로젝트마다 다른 관심사 적용 시 코드 수정 최소화 (jsp에서 헤더, 푸터 분리 하여 include로 관리한것과비슷)
	3) 원하는 관심사의 유지보수가 수월한 코드 구성 가능



6) 트랜잭션의 지원
	트랜잭션 : DML의 집합. DB 작업의 단위 
	DB 작업시 트랜잭션 관리를 매번 상황에 맞게 코드로 작성하지 않고,
	어노테이션이나 XML로 트랜잭션 관리를 설정할 수 있다. (commit, rollback => 대표적 트랜잭션) 
	(하나의 메소드에 insert와 delete가 있는데 하나가 실패하면 rollback을 해준다. 즉, 하나의 집합으로 움직이게해준다. 
	이걸 트랜잭션을 지원한다고한다.)

-------------------------------------------------------
STS (Spring Tool Suite) 설치 (요거가 프레임워크임)
	설치방법이 2가지
	- eclipse 플러그인 (이게 어려움 하지만 이걸로 할것임)
		-> 이걸로만 할것임 . 이게 옛날 버전이긴함 하지만 이걸 알아야함 
		-> 톰캣부터 일일이 다 설정해야한다. 
	- spring boot (쉬움. eclipse 플러그인을 해내면 spring boot는 편함)
		=> 톰켓이 내장되어있음

	- eclipse 플러그인
   		이클립스 실행 > Help > Install New Software
 		  > http://download.springsource.com/release/TOOLS/update/e4.8/
  		 > Add > Name : STS > Ok >  Select All > Next > Next > progress 창 확인

- 프로젝트 생성 (Maven, pom : Project Object Model)
	Maven은 필요한 라이브러리를 특정 문서 (pom.xml)에 정의해 놓으면
	사용할 라이브러리 뿐만 아니라 해당 라이브러리가 작동하는 데에 필요한 
	다른 라이브러리들 까지 관리하여 네트워크를 통해서 자동으로 다운받아 준다.
	
	Legacy Project !! -> MVC project 

*controller : 요청과 응답 객체를 가지고 있다! (면접)

	   Alt + shift + n > Spring Legacy Project
 	  > Spring MVC Project 클릭 > 프로젝트명 : ex00
 	  > Next > 패키지명 : com.koreait.controller > Finish	

	pom.xml에서 환경을 맞춰줘야한다. 

	프로젝트 우클릭 -< maven -> update project -> forced update

	pom.xml을 수정하면 업데이트를 항상해야한다

- 버전관리
[pom.xml]
   12번째 줄 '3.1.1.RELEASE'에서 5.0.7.RELEASE로 변경
   11번째 줄 java version 1.8로 변경
   139번째 줄 2.5.1을 3.5.1로 변경
   141, 142번째 줄 1.6에서 1.8로 변경
   저장한 후 > 프로젝트 우클릭 > Maven > update project > Force 체크후 Finish

   ※만약 프로젝트에 오류 발생 시 
   C:\Users\여러분계정폴더\.m2\repository 폴더 삭제 후 이클립스 재실행
	

Lombok 라이브러리 설치 
	이클립스와 스프링 플러그인만으로도 스프링 개발이 가능하지만,
	Lombok(롬복)을 이용하면 Java개발 시 getter/setter, toString(), 생성자등을 자동으로 생성해주므로
	설치가 필요하다. 
	Lombok을 설치하는 순간 jsp 배운사람과 안배운 사람의 차이가 생긴다.
	왜냐하면, 스프링은 눈에 안보이기때문이다. 그렇기에 jsp를 배워야 안보여도 이게 뭔지 안다.
	스프링만 안다면 그냥 쓰면 되기때문에 바보개발자라고 불리기도한다. 
	https://projectlombok.org/download

맥-> 터미널 -> java -jar lombok.jar의 경로
	이후에 이클립스를 닫고 터미널 실행 -> eclipse의 경로를 넣어준다. -> update -> quit -> 터미널 끝

   https://projectlombok.org/download
   cmd창 열기 > java -jar [다운받은 .jar파일 드래그 앤 드롭] >
   specify   location클릭 후 eclipse.exe경로로 설정 >
   install 클릭 > 끝


설치되었는지 확인 : 이클립스 경로에 lombok.jar가 들어가있으면 성공
------------------------------------------------------------------------------------
[스프링 프로젝트 기본 구성 요소]

src/main/java : 작성되는 코드의 경로
src/main/resources : 실행할 때 참고하는 기본 경로 
src/test/java : 테스트 코드를 넣는 경로
src/test/resources : 테스트 관련 설정 파일 보관 경로 

웹과 관련된 스프링 설정 파일 (Resources, View Resolver)
	src/main/webapp/WEB-INF/spring/appServlet>sevlet-context.xml

스프링 설정 파일 (Bean, IoC컨테이너)
	src/main/webapp/WEB-INF/spring/root-context.xml	

	->bean을 관리하는 xml 파일
	->즉, 객체들을 스캔해놓는 파일 

Tomcat의 web.xml파일 (Front Controller, DispatcherServlet)
	src/main/webapp/WEB-INF/web.xml

	-> 프론트 컨트롤러로 보낼수있는놈

템플릿 프로젝트의 jsp파일 경로
	src/main/webapp/WEB-INF/views

Maven이 사용하는 pom.xml
	[project]/pom.xml

------------------------------------------------------------------------------------
의존성 주입 테스트
	레스토랑 객체를 만들고 셰프 객체를 주입하는 예제
	- 생성자, setter메소드를 이용한 주입으로 의존성 주입 구현.
	- 설정 방식은 XML, 어노테이션을 이용해서 처리
------------------------------------------------------------------------------------




---------------------
클래스 만들고, 어노테이션 쓰고, 루트컨텍스트에서 그 어노테이션을 스캔해주고 beans graph에서 확인 !! 오...


--------------------------
스프링 프레임워크 동작 시 생기는 일  => 이클립스 ex00 페키지 참고하자! 
	- 스프링 프레임워크가 시작되면 먼저 스프링이 사용하는 메모리 영역을 만든다. 
		이것이 Context이다.
	- 스프링은 자신이 객체를 생성하고 관리해야 하는 객체들에 대한 설정이 필요하고
	  이 설정 파일이 바로 root-context.xml이다.
	- root-context.xml에 설정되어 있는 <context:component-scan>태그의 내용을 통해서 
	  com.koreait.sample패키지를 스캔하기 시작한다. (ex00/root-context.xml ①참고)
	- 해당 패키지에 있는 클래스들 중에서 스프링이 사용하는 @Component라는 어노테이션이
	  존재하는 클래스의 인스턴스를 생성한다. (ex00/com.koreait.sample ② 참고)
	- Restaurant 객체는 Chef객체가 필요하다는 어노테이션(@Autowired) 설정이 있으므로,
	  Chef객체의 레퍼런스를 Restaurant 객체에 주입한다. (ex00/com.koreait.sample.Restuarant.java ③ 참고)


















