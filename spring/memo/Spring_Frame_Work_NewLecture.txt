https://www.youtube.com/watch?v=XtXHIDnzS9c&list=PLq8wAnVUcTFWxnsrMu5kS_jt_o8gpEiTR

1강 Spring소개와 학습안내

Dependency Injection
Transaction ManageMent
	=> 이 두가지가 spring의 핵심이다. 

Java SE에 Spring을 얹어서 웹개발을 하는 것이다. 

MVC <- DI
트랜잭션  <- AOP
인증과 권한 <- Servlet Filter
	↕
느슨한 결합력과 인터페이스 

2강 느슨한 결합력과 인터페이스

참고> 자바 객체지향 33강 링크 
https://www.youtube.com/watch?v=YZzpGtpW2h0&list=PLq8wAnVUcTFV4ZjRbyGnw6T1tgmYDLM3P&index=86

3강 DI 
	스프링 프레임워크 코어기능 : 종속 객체를 생성 조립해주는 도구

	Dependency Injection (부품 조립!)
	
	dependency : 부품 이라고 생각하자. (종속관계니까)
	
	그 dependency를 injection 시키는 것이다. 
--------------------------------
	B b = new B (); -> Dependency
	A a = new A ();
	
	a.setB(b);  -> Injection ! 꽂는것임 !!

	즉, 조립형으로 사용하는것이다. 
	부품을 쉽게 교체할수있다. 
---------------------------
	Injection의 두가지가 있다. 
		1. Setter Injection -> setter를 통해서 조립하는것
			B b = new B();
			A a = new A();
			a.setB(b);

		2. Construction Injection -> 생성자를 통해서 조립하는것
			B b = new B();
			A a = new A(b);

	즉, 스프링의 가장 기본적이고 핵심적인 기능이자 이유가 DI 이다. 

	DI는 결국 부품을 조립해준다. Dependency Injection !


4강 IoC 컨테이너 (Inversion of Control)
	컨테이너의 용도 : 프로그램 주문 내역을 담아 놓는것 ! 이라고 이해하자

	왜 부품 컨테이너라고 하지않고 IoC 컨테이너라고 하는건가?
	
	작은 부품먼저 만들어지고 큰 부품에 그것을 결합시킨다.
	더 큰 부품에 더 작은 부품을 조립하는 것이다.
	
	일체화된 부품들은 가장 큰것부터 만들고 그 안에 작은것들을 만드는 것인데,
	결합형 프로그램은 작은 부품부터 만들어진다. 작은걸 만들고 큰것에 결합을 하는것이다.
	즉, 역순이다! Inversion of Control 이다! 

	결국 Dependency가 역순으로 조립된다. 이런 부품들을 담는 컨테이너를 IoC 컨테이너 라고 하는것이다.

	이 컨테이너는 단순히 부품을 담는게 아니라 결합하여 조립까지 되어있는 컨테이너이다. 

	*Maven 과정 듣기 (뉴렉쳐 강의에 있기에 참조하자)
	
	
5강 Dependency를 직접 Injection 하기

8강

Spring의 지시서를 조립해주는 녀석이 ApplicationContext다. 이건 인터페이스

	ClassPathXmlApplicationContext : 클래스의 경로 -> 이게 가장 보편적이다. 
	FileSystemXmlApplicationContext : 파일 시스템의 경로
	XmlWebApplicationContext : 웹에서 경로를 찾음
	AnnotationConfigApplicationContext : 어노테이션으로 경로를 찾음


XML 초기화하는 방법 3가지

<!-- 1. setter로 초기화하는 방법 
	<bean id="exam" class="springNewLecture.di.entity.NewlecExam">
			 <property name="kor">
			<value>40</value>
		</property>
		<property name="eng" value="30"/>
		<property name="math" value="30"/>
		<property name="com" value="20"/> 
	
	</bean>	
	-->
	<!--  
	2. 생성자로 초기화하는 방법 
		생성자의 매개변수의 순서대로 값을 세팅하는 것이다. 
		인덱스를 주어서 이렇게 설정할수도있다.
		name을 주어서 지정할 수있다. 이게 명확하고 보편적이다.
		type을 거론하여 지정할 수 도있다.
		
	<bean id="exam" class="springNewLecture.di.entity.NewlecExam">
		<constructor-arg name="kor" value="10"/>
		<constructor-arg name="eng" type="int" value="30"/>
		<constructor-arg index="2" value="40"/>
		<constructor-arg index="3" value="50"/>
	</bean>
	-->
	
	<!-- 3. 처리기를 사용하여 간편하게 생성자로 초기화하는 방법. 
		아래의 Namespaces에서 P를 추가시켜주면 위에 xmlns:p="http://www.springframework.org/schema/p"설정이
		추가되어 사용할 수 있게된다.
		Namespaces : 이름이라는 것을 식별하기 위해서 붙여진 확장된 Namespaces라고 이해하면된다.
			즉, 접두사인데, 그 접두사를 관리하는 처리기만 특정지어줘서 그것만 처리할수있도록한다. 
			p로 관리하여 생성자로 초기하는 방법이다. 
	-->
	<bean id="exam" class="springNewLecture.di.entity.NewlecExam" 
		p:kor="10" p:eng="20" p:math="30" p:com="50"/>

** 처리기로 사용하여 간편하게 생성자로 초기화 할 수 있다. Namespaces지정!


Collection을 DI 하는 방법

	<!-- <bean id="exams" class="java.util.ArrayList">
		ArrayList의 생성자에 collection을 담을 수 있는 것을 이용하여
			setter를 사용하지 못하므로 생성자로 add 메소드를 생성해준다. 
		
		<constructor-arg>
			컬렉션이므로 list태그를 연다
			<list>
				1) 직접 이렇게 bean을 열어서 생성할수도있고
				<bean class="springNewLecture.di.entity.NewlecExam" 
						p:kor="1" p:eng="2" p:math="3" p:com="5"/>
				2) 이렇게 참조해서 위에서 만든 exam 을 가져다 쓸수도있다. (42번줄)
				<ref bean ="exam"/>
			</list>
		</constructor-arg>
	</bean> -->
	
	
	<!-- 그런데 위와같이 (56~70) 컬렉션은 항상 생성자에 또다른 컬렉션을 추가하여 생성해야하는가?
		아니다. Namespaces에서 util을 체크하여 
		xmlns:util="http://www.springframework.org/schema/util"을 활성화하여 사용
	 -->
	<!-- 실제로 객체를 만들어주는 util을 사용하여 선언할수있다. -->
	<util:list id="exams" list-class="java.util.ArrayList"> 
		<bean class="springNewLecture.di.entity.NewlecExam" 
				p:kor="1" p:eng="2" p:math="3" p:com="5"/>
		<ref bean ="exam"/>
	</util:list>

**Namespaces에서 util을 사용하면 간편하게 객체로 컬렉션을 선언해줄 수있다. 


어노테이션을 이용할 때의 장점과 @Autowired를 이용한 DI
	어노테이션으로 meta데이터를 심어놔서 자동화가 되도록 만든 것이다. 
	객체를 바꾸면 설정도 바꿔버리는 깔끔하게 업데이트를 시키는게 어노테이션을 사용하는 법이다!
	
	

@Autowird는 3가지 방법이있다.

1. setter메소드에 사용하는 법

2. 필드위에 사용하는 방법
	
3. overload된 생성자 위에서 사용하는 법




@Component 를 의미론적으로 이름을 갖도록 한 어노테이션이있다
	@Controller
	@Service
	@Repository

	구체적인 역할을 명시화 할 수 있다. 


<JAVA Configuration >

XML파일을 JAVA 파일로 만드는것
즉, 설정을 JAVA로 하는것 !!
@Configuration 어노테이션을 주고 Config관련 JAVA 클래스를 만든다. 

---------------------------------------------------------------------------------
<AOP 란?>
AOP는 spring과 상관없는 하나의 방법론이다
Aspect Oriented Programming : 즉, 관점 지향적 ! 

관점지향적 프로그래밍은 객체지향적 프로그래밍보다 조금 더 큰 의미. 
개발자, 운영자, 사용자의 관점에서 다르게 보이는 방법론

	로그처리, 보안처리, 트랜잭션 처리 등등의 로직들은 핵심 로직의 중간중간에 껴있다.

	AOP는 cross-cutting concern 을 따로 빼서 함수를 호출하는 방식으로 구현한다.
	즉 곁따리 업무를 따로 분리하고, 그곳에서 core concern을 불러오도록 하는 것이 AOP다. 
	
		

Proxy 개념
	Proxy클래스에 구현되는 cross-cutting concern

	스프링에서는 코드 변경과 수정을 DI로 해결해서 매우 쉽다. 

AOP를 하기위해서는
	core concern, cross-cutting concern, proxy 3가지가 자유롭게 왔다갔다 해야한다. 
	스프링에서는 IoC컨테이너에서 그 작업이 자유롭게 이루어진다. 
	
스프링에서는 cross-cutting concern (횡단관심사)를 4가지로 분류한다.
	-> Advice 라고한다. 
	Before: 앞에만 필요한것
	After returnning : 끝에만 필요한것
	After throwing : 예외를 처리하는것
	Around : 앞뒤 모두에서 필요한것


AOP 구현방식
	포인트컷
	조인 포인트 : 조인하게 될 메서드 포인트
	위빙 : 뜨게질하다. 위빙이 일어난다고 한다. 












