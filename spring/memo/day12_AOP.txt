AOP (Aspect Oriented Programming) : 관점지향 프로그래밍

백엔드 개발자 관점, 프론트엔드 개발자 관점 이렇게..!
포커스를 맞출 수 있는 프로그래밍을말함

관점이란 개발에 있어서, 관심사 (concern)을 의미한다. 
관심사는 개발 시 필요한 것들을 생각하는 일이며, 아래와 같다.

- 파라미터가 잘 전달 되었는가 ?
- 이 로직에서 발생할 수 있는 모든 예외를 처리하자! 
- 적절한 권한을 가진 사용자가 작업하고 있는가? 
	=> 꼭 필요하지만 핵심 로직에는 들어가지 않는 것들이다. 
	=> 따로 분리해서 넣으면 되지 않을까? 핵심로직에만 집중하면 되지 않나? 라는 생각이 들게됨

	=> 핵심 로직은 아니지만 반복적으로 개발에 필요한 관심사들이다.
		- log출력, 예외처리, 트랜젝션 등
	따라서 aop는 이러한 것들을 모듈로 분리하여 작성하고
	핵심 비지니스 로직만을 작성하도록 한다. 

	예) 나눗셈 프로그램 개발 시 두 개의 숫자를 나누는 것은 핵심로직, (종단관심사)
	   0으로 나누는 지 체크하는 것을 주변로직이라고 한다. (횡단관심사)

	즉, 반복적으로 나타나는 횡단관심사를 모듈로 분리한 후 적절한 곳에 
	로직을 주입하는 것이 AOP이다. 스프링에서는 별도의 복잡한 설정 없이
	간편하게 AOP의 기능들을 구현할 수 있기 때문에 중요한 특징 중 하나이다. 


AOP를 사용할 수 있을 때
		(AOP는 메소드가 호출되고 나서 실행되는 것이다. 기준이 해당 메소드의 실행이다!
		즉, 메소드에 끼어있는 것이므로 메소드가 기준이 되는것이다.)
	어노테이션
	- Around(전 구역)
	- Before(메소드 시작 직후)
	- After(메소드 종료 직전)

	- AfterReturning(메소드 정상 종료 후 ) 
	- AfterThrowing(메소드에서 예외 발생 종료 후 ) -> 예외 처리

--------------------
pom.xml 업데이트 함 


------------------

프록시

횡단관심사와 종단관심사를 연결해주는 것이 프록시다.
프록시가 포인트컷이라는 것을 알려준다.
