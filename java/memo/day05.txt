절차 지향 언어 (C언어)
	- 자료 구조를 만드는 데에 목적이 있다. 
	- 문제 해결 절차에 맞게 구현되어야 하며, 절차가 변할 수 없다. 
	- 유지보수하기가 상대적으로 쉽다.

객체 지향 언어 (JAVA, Python, ...) 
	- 만들어진 자료구조를 사용하는 데에 목적이 있다. 
	- 작업 파트별로 클래스를 만든 후 객체로 관리하기 때문에
	  여러 곳에서 다양하게 사용할 수 있어서 생산성이 좋다. 
	- 유지보수하기가 상대적으로 어렵다.
------------------------------------------------------------------------

컬렉션 프레임워크 (Collection Framework)
	프레임워크 : 작업할때 틀을 제공하는 것
	멘땅에 헤딩하는게아니라, 그 틀에 맞춰 작업하는것

	라이브러리 vs 프레임워크
	프레임워크는 전체 로직 흐름을 스스로가 판단하여 구현되고,
	라이브러리는 개발자가 로직 흐름을 판단하여 구현한다. 
	(프레임워크가 더 큰 뜻임)

	컬렉션 : 데이터를 수집한다 라는 의미

	많은 데이터를 쉽고 효과적으로 관리할 수 있는
	표준화된 방법을 제공하는 클래스와 인터페이스들의 집합



1. List extends Collection
	(List는 인터페이스다)

-구현 클래스
	Vector : 용량관리에 특화되어 있는 자료구조
	(vector를 안쓰는 이유 : 느림. 왜? 안정성에 맞춰져있음
	멀티쓰레드 환경에 특화되어있기때문에 느림..
	동기화 처리가 되어있기 때문에 느리다. 성능저하.
	데드락(교착상태)가 걸리게된다. 안쓴다!)

	LinkedList : 각 저장공간마다 다음 저장공간의 주소를 기억하고 있어서
		서로 연결이 된 자료 구조.
	값을 추가하고 삭제하는데에있어서 arraylist보다 좀 빠르다
	(노드가 있기때문이다.)

	ArrayList : 배열을 활용한 자료구조 (인덱스 관리)
	검색에있어서 arraylist가 가장 빠르다. 
	
	상황에 따라 속도차가 다르다! (LinkedList, ArrayList)
	값의 추가와 삭제는 노드를 사용하는 LinkedList의 성능이 더 좋고,
	값의 검사는 인덱스를 사용하는 ArrayList를 사용하는 것이 더 좋다. 

---------------------------
2. Set extends Collection (집합 - 원소끼리의 중복 허용이안된다.)

	집합이다. 
	집합은 중복되는 원소를 포함할 수 없다. 

-구현 클래스
	HashSet 

	저장된 값들은 인덱스가 없기 때문에 저장 순서가 고정되어 있지 않다. 
	get 자체가 없다. Set을 사용하는 목적은 무엇인가? 
	=> 값의 유무 검사의 목적으로만 사용한다. 

	HashSet이 ArrayList에 비해 훨씬 빠르다. 
	검색이 엄청나게 빠르다. -> 검색의 목적에 특정되어있다. 

Set 순서 부여
	iterator () : 반복자 (순서가 없는 것에 순서를 부여해주는것. 즉 결국 순서가 생긴다. )
	

3. Map
	두 개의 자료구조가 합쳐져 있는 자료구조 (그래서 collection을 상속하지 않는다.)
	
	key | value

	| : 이게 해시테이블 이라고 한다. 
	key값은 절대 중복되면 안된다. (배열의 인덱스같과 같은것이다)

	key와 value를 한 쌍으로 관리한다.
	key를 통해서 value를 가져오는 구조이며,
	key는 중복이 불가능하고, value는 중복이 가능하다.
	만약 중복된 key값으로 value를 추가하게 되면
	마지막에 넣은 value값으로 덧입혀져서 적용된다. 






※자료구조와 알고리즘

알고리즘 : 문제를 해결할 때의 절차 순서

자료구조 : 의미없는 데이터가 자료구조를 통과하는 순간 하나의 
	의미있는 데이터가 된다. 
	여러 알고리즘이 모여 구조화가 되어있는 것.
	의미없는 데이터가 자료구조를 통과하면 하나의 정보가 된다.

	10 : 의미 없는 값
	int age = 10 : 자료구조

	밀가루가 빵만들기라는 자료구조를 통과해서 빵의 재료가 되는것

	※ 어떠한 값을 변수에 담는것 조차도 자료구조라고 말할 수 있다!

	컬렉션프레임워크를 자료구조라고 부르는 이유
	=> 데이터를 의미있는 데이터로 저장하기 때문이다.



