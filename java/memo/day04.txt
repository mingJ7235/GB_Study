내부 클래스 : 클래스내에 클래스
	안드로이드에서 많이 사용됨
	클래스 내부에 필드로써 클래스가 존재하는 것
	

	익명 내부 클래스..!

----------------------------------------
[실습]
인터페이스 : Cafe (아직 구현되지 않은 3가지 기능)
Starbucks (본사)
Road (main)
스타벅스 매장은 한 개가 아니라 여러개이다.
각 매장은 신규 오픈 시 본사에 정보를 등록해야 한다.
등록해야할 정보는 아래와 같다.
1. 메뉴
2. 가격
3. 판매방식

본사에서는 신규 오픈 한 매장에서 전달한 3가지 정보를
직접 사용하는 등록 메소드를 구현해 놓는다. 
신규 오픈한 매장은 등록메소드 실행 시 3가지 정보를 구현하게 되고
콘솔창에 구현한 정보를 확인할 수 있다. 

1. 강남 매장은 메뉴별 가격이 존재한다.
2. 잠실 매장은 무료나눔 매장이다. (판매방식이 필요없음)

---------------------------------------

마커 인터페이스 (Marker)
	특정 클래스들을 그룹화 하기 위하여 사용한다.
	인터페이스도 타입임을 잃지 말자
	인터페이스도 부모이고 타입으로 볼 줄 알아야 한다. 

--------------------------------------------------
예외처리
	
	에러 : 심각한 오류
		컴퓨터가 정상 작동을 하지 않는것	
	예외 : 덜 심각한 오류
		
	오류 라는 표현을 사용한다.

	예외 발생 시 해당 예외 필드가 메모리에 할당되고,
	할당된 필드의 주소값이 예외가 발생된 곳으로 날아온다.
	이를 잡아주는 문법이 try catch문이다. 

try {
	오류가 날 수 있는 문장
}catch(예외이름 객체명) {
	객체명.필드명;
	
	오류 발생 시 실행할 문장
		
}catch(예외이름 객체명) {
	
}catch(예외이름 객체명) {
	
}catch(예외이름 객체명) {
	
}

-----------------------------
throws (예외 던지기)
	메소드명 () throws Exception명 {
		메소드 안에서는 위에 throws한 Exception이
		발생하지 않는다. 
		하나의 메소드 안에서 여러개의 동일한 예외가 생길때
		한번에 던지는 것이다. 
	}
-----------------------------
외부 장치 (드라이버)를 직접 연결했을 때
사용 후 반드시 장치를 닫아주어야 한다. 

1. 이 때 finally 문법을 사용한다. 
finally {
	외부 장치 닫기 (파일입출력때 더)
}

2. 이 때 try statement 문법을 사용한다. (나중에 배울것)
try (연결 객체) {

}catch () {

}

-------------------------------------------------
API(배포, 임포트) (Application Programming Interface)
	API는 라이브러리의 집합체이다.
	







--------------------------------------------------