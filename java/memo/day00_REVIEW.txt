기쁘다 갓동석 오셨네~

20210120 

--------------------------------------------------------
한동석강사
tedhan1204@gmail.com
010-4382-5111

수업자료 공유
	웹 하드
	kedudisk.com
	아이디 : it1000
	비번 : 학생11!

	폴더명 : IT강남 한동석 선생님 국비 0900-1월 -> pw : 0900gb

커리큘럼
	JAVA, 웹표준(HTML(시맨틱 태그), CSS(반응형 개발), Javascript(jQuery)),
	JSP(Ajax, JSON), Spring Framework

Summary>
1) 설치 (jdk,jre,jvm)
	
	프로그램 : '소스코드로 잘 짜여진 틀' 이라고 생각하자. 
		(소스코드 : 컴퓨터와 소통하는 것)

	- 동작원리를 이해하자!
	
	JVM (자바 가상 운영체제 / Machine은 OS라는 의미!)
		자바프로그램
		JVM (운영체제의 종류에 맞게 사용자의명령을 전송한다)
			-> 생산성이 좋다
		OS (하드웨어에 적절한 전기신호를 흘려주는 역할)
		하드웨어
		=> 이 순서로 프로그램이 돌아간다. 

	JRE (JAVA RUNTIME ENVIRENMENT)
		JVM을 구동시키기 위한 다양한 라이브러리 환경

	JDK	
		개발도구상자

IDE 
	한 회사에서 하나의 프로젝트만 담당하지 않는다.
	여러프로젝트를 다루기 위해서는 하나의 IDE가 아닌
	여러버전의 IDE가 필요하기 때문에 무설치 버전으로 설치하는것이 일반적이다

-----------
변수(저장공간)
	어떤 값이 들어올지를 자료형으로 알려주어 선언한다. 
	변수는 저장공간이다!!

	1. 같은 값이 반복하여 사용될 때 (유지보수가 용이해진다.)
	2. 값에 의미부여를 할 수 있다. 
--------
연산자(최단산쉬관리삼대)
	결합성
		동일한 연산자가 하나의 수식에 여러개 존재할 때 알맞는
		방향으로 결합되어 연산되는 성질

	EX) 1 + 3 + 9 여기에서 일단 좌에서 계산 후 4 + 9 이렇게 계산이 되는것
			결합되어 연산되는것 (1+3) + 9

	우선순위
		다양한 연산자가 하나의 수식에 존재할때 순서를 매기는 방법
	
		최우선
		단항
		산술
		쉬프트
		관계
		논리
		삼항
		대입

----------
제어문(if, 삼항연산자, switch, for, while)

- 조건문
	if 문과 삼항연산자

	if문은 속도가 상대적으로 느리지만 메모리를 덜 사용한다. (즉 cpu를 더 사용한다)
	삼항연산자는 속도가 빠르지만 메모리를 더 사용한다. 

	※ 보통 삼항연산자는 메소드의 return값에 많이 사용된다. 

- 반복문
	1. 몇 번 반복할 지 알 수 있다.
		for문 사용

	2. 몇 번 반복할 지 알 수 없다. 
		while문 사용

	※맞는 목적으로 사용하는것이 가장 중요하다!
---------
메모리구조

- Storage Class (저장 기억 부류)

	Stack			Heap			Data영역
변수	지역변수,매개변수					전역, static(정적) 변수
초기화	직접						자동 초기화
생명주기	}			직접해제(가비지콜렉터)	전역 : new / 정적 : 프로그램종료시
보안성	상 (해당영역외에서는 사용불가, 해당영역 끝나면 해제)	중 / 하 (정적은 계속 살아있으니)

Q1. 지역변수와 전역변수중에 무엇이 먼저 생겼나요? 
	옛날에는 전역변수만 존재했다. 옛날에는 메모리가 엄청 작아서 
	전역변수로 선언하면 메모리가 너무 많이 소모가되었다.
	그래서 지역변수가 만들어지게 된것이다. 그렇기때문에 지역변수가 보안성도 높아진것. 
--------------
배열(index)
	int[] arData = {3, 5, 7, 8, 9}
	=> arData는 이름이 하나기에 저장공간이 하나다! 
	=> 그렇기에 저장공간은 하나다. 
	=> 배열명을 출력하면 첫번째 방의 주소값만을 가지고있다.
	=> 왜 첫번째 주소값을 가지고 있느냐!

	※ 그렇다면 어디에 저장되는가!? 

	arData는 지역변수라면 stack, 전역변수라면 data영역에 저장
	배열의 값은 heap메모리에 저장

	
	int x = 10;
	=> 이름이 하나라는건 저장공간이 무조건 하나라는 의미다! 

	값은 무조건 1개만 담는다. 그래서 배열값에는 첫 주소값만 기억.
	배열은 주소값. 다음 주소에 접근하기위에서는 어떻게해야하는가?
	값은 하나만 담는데!?!??!
	(c언어에서 포인터연산...공부해보자)
	시작주소만알면 다음 주소에 접근할 수 잇다.
	그러나 주의! 값에 접근은아니다.
	C언어는 * 가 주소값에 있는 값을 찾으라는 명령
	ex ) *(arData+2) => arData의 3번째 방의 값을 찾아라. 
	C언어의 *( + ) 의 연산자를 치환하여 [] 를 사용한것이다!

	그래서 ! => JAVA에서는 arData[2] 이 3번째 방의 '값' 이 되는 것이다. 
	그래서 항상 배열의 방번호는 0부터 시작하는 것이다.
	방번호를 인덱스 (index)라고 한다. 인덱스는 '초기값'의 의미를 가진다.

	정리 > index가 0부터 시작하는이유
	배열명은 시작주소를 가지고 있고 해당 주소를 접근할 때 배열명 + 0으로
	접근하기 때문이다. (즉 배열명은 시작주소를 가지고 있기 때문이다!)

	- 자바에서의 정적배열과 동적배열

	- 정적 배열 : 자바에서는 정적배열이 존재하지 않는다. 
	int [] arData = new int[3];
	arData = new int[4]; -> 가능하다. 

	new : 뒤에있는것을 heap 메모리에 할당해라! 라는 명령어다. 
	즉, 무조건 heap으로 할당한다! (중괄호로 선언하면 new가 생략된것임) 
	무조건 동적메모리인 heap에 할당되기 때문에 !
	자바에서의 배열은 정적일 수가 없다. 동적 배열이다 ! 
	즉, heap메모리에 할당이 되기때문에 정적배열이 있을 수가 없다. 
	모든 배열은 heap메모리에 값들이 저장되기 때문이다. 

	결론: 하지만 길이가 정해져 있으므로 정적배열이라 볼수있는 여지가 있으므로
	자바에는 '메모리상' 정적배열이 존재하지 않는다! 가 정확하다
	이유? 모든 배열은 동적메모리인 Heap 메모리에 할당되기 때문! 
-------------
	
메소드(주소)
	메소드는 작성된 코드의 주소값을 담고 있는 저장공간이다. 

메소드 선언 순서

예) 두 정수의 덧셈
1. 메소드의 이름을 생각한다. 
	addFor2Integers() {}

2. 매개변수를 생각한다.
	addFor2Integers(int num1, int num2) {}

3. 실행할 문장을 작성한다.
	addFor2Integers(int num1, int num2) {
		int result = num1 + num2;
	}

4. 리턴값을 생각한다. 
	addFor2Integers(int num1, int num2) {
		int result = num1 + num2;
		return result;
	}

5. 리턴 타입을 결정한다.
	int addFor2Integers(int num1, int num2) {
		int result = num1 + num2;
		return result;
	}


메소드를 사용하는 목적 

1. 재사용 
	=> 특정성을 부여해서는 안된다!! 절대!! 
2. 소스코드 간결화 (이건 특정성이 부여된 경우가 있다)

메소드에서 
1. 리턴을 해야할 때
	사용하는 부분에 작업의 결과를 알려주어야 할 때 
	ex) 두 정수의 합을 구하는 메소드 선언

2. 리턴을 할 필요 없을 때 
	메소드 내에서 모든 작업이 완료되었을 때
	ex) 두 정수의 합을 println()으로 출력하는 메소드 선언

---------------------------------------------------------------------

클래스
상속
Casting
추상클래스
인터페이스
예외처리
Object
String
컬렉션 프레임워크
쓰레드
파일입출력

