JSP

HTML CSS JS

HTML : 정보
CSS : 디자인
JS : 연산 

하지만 JS로만 연산하기에는 부족한게 있다. 
DB조회를 통해서는 Java가 필요하다. js는 페이지를 동적으로 만들기위한것이었다면
jsp는 완전한 백엔더의 언어이다.

		요청
클라이언트 	-> 		웹서버(아파치)			웹 컴테이너 (서블릿컨테이너)
		<-						(서블릿! 이 핵심)
				정적데이터			
		응답 (html로받음)	
		(정적데이터)	동적데이터		->	동적데이터를 받아서 잘 연산해서 보내준다.
								무조건 웹컨테이너의 목적은 연산이다!!

				정적데이터,동적데이터구분한다.	db에 관련된 연산을 하는 것이다. 
				js로 연산가능.			java로 연산해야한다. -> servlet, jsp 
				정적데이터!			동적 데이터!1
								servlet -> .java (자바 프로그램!)
								서블릿으로 연산한것을 html으로 연산결과를 응답해야하므로
								servlet은 java코드안에 html 을 쓴 것이다. 
								하지만, 서블릿은 응답이 불편하다. 그래서 jsp가 나온것!
								jsp는 html코드에 java를 넣은 것이다. 
								jsp가 훨씬 편하다. 

								웹 컨테이너 안에는 두개가 있다는거 기억! 서블릿, jsp !

								결론적으로 연산을 하는 프로그램은 java다 ! 
								java가 돌아가기 위해서는 컴파일을 해야한다.
								jsp파일은 java파일이 있을수도, 없을 수도있다.
								jsp파일이 컴파일이되면 .jsp_servlet이 된다. 
								즉, jsp파일이 컴파일을 통해 servlet으로 변환되는것.

								그렇기때문에 서블릿을 안쓰고 jsp를 쓴다!
								(jsp도 서블릿이다!!!!)
								
								스레드풀이 있다. 
								클라이언트들의 요청을 응답하기위해서. 

※ WAS (톰켓)가 맨처음에 applicaiton context라는 객체를 만든다.
메모리에 영역을 할당한다. -> 요청이 얼마나 들어올지 모르니까.
이것을 application listener로 받고, 이것에 맞는 servlet을 메모리에 할당해준다.
멀티쓰레드일수밖에 없다. 
(노드는 단일이다.)

사용자가 요청을하면 웹서버가 정적인지 동적인지 점검한다. 동적이면 웹컨테이너로 온다. 
이때 WAS가 application context객체를 만들고, 이것에 맞는 servlet을 메모리에 할당한다. 


httprequest : 웹서버에서 클라의 요청을 담는 객체
httpresponse : 웹서버에서 클라요청에해당하는 응답을 담는 객체

servletRequest : 웹컨테이너에서 동적인 요청을 담는다. 이걸 다시 응답하려면 httpRequest로 변환된다.
servletResponse : 










































