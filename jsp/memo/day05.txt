MyBatis
	- 기존 jdbc에서는 java파일에서 db로 연결하기위해서 java와 sql 2가지 언어를 동시에 썼다.
	- 하나의 파일에는 하나의 언어가 최고다!!! -> 모듈화 !!!!
	- MyBatis는 프레임워크인데, java파일에 있는 sql을 분리 시켜준다. 대박!!
	- sql을 분리하는 순간 분업이 된다. 
	- sql은 xml로 따로 분리가 된다. 


	소스코드 안에 SQL 문을 작성하면 코드가 길어지고 섞여 있어서 유지보수 및 분업이 쉽지 않아진다.
	MyBatis는 기존 JDBC방식과는 달리 SQL문을 XML파일에 작성함으로써 코드가 줄어들고,
	SQL문 수정이 편해진다. 
	또한 DBCP를 사용하여 커넥션을 여러 개 생성하기 때문에 JDBC만 사용하는 것 보다는 
	작업 효율과 가독성이 좋아진다. 
	
	※ibatis는 MyBatis의 하위버전 즉 2.5버전이며 JDK4버전 이상에서 사용가능하다. 
	MyBatis는 3.0버전이라고 하며, JDK5버전 이상에서 사용가능하다. (면접에서 나올수잇음)
	iBatis와 MyBatis의 차이점은 몇개의 문법 및 사용 용어(명칭) 변경 등이 있다. (차이가 많이없다.) 

	MyBatis는 프레임워크다!!

MyBatis 작동 순서

1) 응용 프로그램(어플리케이션)이 SqlSessionFactoryBuilder를 통해 SqlSessionFactory를 빌드할도록 요청한다.
2) SqlSessionFactoryBuilder는 SqlSessionFactory를 생성하기 위한 MyBatis구성파일을 읽는다. (Config파일)
3) SqlSessionFactoryBuilder는 MyBatis 구성파일의 정의에 따라 SqlSessionFactory를 생성한다. 
	=> 어플리케이션이 시작하자마자 SqlSessionFactory이 생성된다.

4) 클라이언트가 응용프로그램에 대한 프로세스를 요청한다. (쓰레드풀에 요청함)
5) 응용프로그램은 SqlSessionFactoryBuilder를 사용하여 빌드된 SqlSessionFactory에서 
   SqlSession을 가져온다. 
6) SqlSessionFactory는 SqlSession을 생성하고 이를 Application에 반환한다. 
7) 응용 프로그램이 SqlSession에서 매퍼 인터페이스의 구현 객체를 가져온다. 
