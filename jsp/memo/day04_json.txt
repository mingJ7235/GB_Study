JSON
	데이터를 교환하는 '방식' !!
	장점 : 데이터가 상당히 가볍게 되어있다. 
	사용자에게 보여지지 않기 때문에 매우 경량화 되어있다.
	웹 <--> 안드로이드 통신할때 json으로 통신을 많이한다. 

	경량화된 데이터 교환 형식.
	서로 다른 언어들 간 데이터를 주고 받을 수 있도록 만들어진 텍스트 기반의 형식이다.
	프로그래밍 언어가 아닌 데이터 표기 방법 중 하나이고 기본적으로 name:value형태의
	구조를 가지고 있다. 

JSON을 다루는 방법

1. JAVA (db를 조회하기 위해서 사용함)
	- 외부에서 전달받은 JSONString을 JSONObject타입으로 변환하여 DB작업 진행
	- DB조회의 결과를 외부에 전달할 때 JSONObject 혹은 JSONArray 타입으로 저장하고
	  toJSONString()을 사용하여 String 타입으로 변환 후 전달 

2. .json
	- JSON데이터가 들어있는 파일

3. uri(REST) (스프링, 노드 등등에서 전부 다 사용함)
	- URL과 URI의 차이 (일단 둘다 요청하는 것임)
		URL : 주소 / 너이름이뭐야? 라고할때 ->여기로 가봐! 가보면 데이터가 있을거야! 라는 느낌
		URI : 데이터 / 너이름이뭐야? 할때 -> 김민재야! 라고 바로 데이터를 알려주는것.
		
	- 어떠한 데이터를 가리키고 있는 고유 주소 
	- default는 xml형식으로 데이터가 보이고, uri 뒤에 .json을 붙이면 json으로 데이터를
	확인할 수 있다. 


-객체 생성 (JSONObject)
	JSON은 맵 구조이기 때문에 key값과 value값이 쌍을 이뤄 저장된다.
	따라서 name이라는 key와 value가 한 쌍을 이뤄서 저장된다. 
	내부 JSON 객체에는 요소들을 put(k, v)을 사용해서 넣어주고,
	외부 JSON 객체로 만든 후 하나로 묶어서 관리한다. 

	외부, 내부 JSON예
	{
		외부 JSON 요소 이름: {
				내부 JSON요수 이름 : 요소 값, 
				...
			        },	
		....
	}

	따라서 JSON은 내부에서 외부 순서대로 데이터를 생성하게된다. (내부 JSON부터!)


-객체 파싱 (JSONParser)
	JSON객체에 있는 정보를 문자열로 전송받았을 때 파싱 작업이 필요하다.
	이 때 데이터가 망가질 수 있기 때문에 별도의 예외처리를 해주어야 한다. 
	생성 시 내부에서 외부로 생성했다면 반대로 외부에서 내부 순서대로 접근해야 한다. 

	JSONParser 파서 객체명 = new JSONParser();
	JSONObject 객체명 = (JSONObject) 파서객체명.parse(JSON객체.toJSONString());  (다운케스팅)

	객체명.get(KEY) == value값

----------------------------------------------------------------------------------------------














