쿠키(Cookie)
	웹 브라우저가 보관하고 있는 데이터로, 웹 서버에 요청을 보낼 때 쿠키를
	헤더에 담아서 전송한다. (헤더 : post이야기할때 말한것  url뒤에 숨어있음)
	웹 브라우저는 쿠키가 삭제되기 전까지 웹 서버에 쿠키를 전송한다.
	
	쿠키는 로컬에 저장된다. 

-장단점
	클라이언트의 일정 폴더에 정보를 저장하기 때문에 서버의 부하를 줄일 수 있다.
	정보가 사용자 컴퓨터에 저장되기 때문에 보안에 위협받을 수 있다.
	데이터 저장 용량에 한계가 있다.	
	일반 사용자가 브라우저 내의 기능인 "쿠키 차단"을 사용했을 경우 쿠키는
	무용지물이 된다. 

1. 동작 방식
	1) 쿠키 생성 : 웹 서버에서 쿠키를 생성하고 쿠키에 응답 데이터를 담아서 웹 브라우저에 전송한다.
	2) 쿠키 저장 : 웹 브라우저는 응답 데이터를 담고 있는 쿠키를 메모리나 파일로 저장한다. 
	3) 쿠키 전송 : 웹 브라우저는 쿠키 요청이 있을 때마다 웹 서버에 전송한다. 
	 	      웹 서버는 쿠키를 사용해서 필요한 작업을 수행할 수 있다.
	

2. 쿠키 생성 및 사용 방식
	1) 쿠키를 생성하고 response 객체에 담는다. 
		Cookie cookie = new Cookie("쿠키이름", "쿠키값");
		response.addCookie(cookie); => 헤더에 담아준다. 

		*인코딩이 필요할 때
		String str = URLEncoder.encode("쿠키값","UTF-8");
		Cookie cookie = new Cookie("쿠키이름", str);
		response.addCookie(cookie); 

	2) 쿠키 유무를 확인하고 쿠키의 값을 얻어온다. 
		String cookie = request.getHeader("Cookie"); //쿠키가 있는 지 판단. 
		if (cookie != null) {
			Cookie[] cookies = request.getCookies(); //쿠키가 여러개니까 array사용
			for (Cookie c : cookies) {
				c.getName();
				c.getValue();
			}
		}


	3) 쿠키를 삭제한다. 
		String cookie = request.getHeader("Cookie"); //쿠키가 있는 지 판단. 
		if (cookie != null) {			
			Cookie[] cookies = request.getCookies();
			for (Cookie c : cookies) {
				c.setMaxAge(0); //유통기한을 0으로 하는것 이렇게하면 쿠키날아감
				response.addCookie(c); //헤더에 다시 유통기한0짜리 쿠키를 다시넣어줌
			}
		}	


※파라미터보다 쿠키가 더 오래남는다. 
※쿠키는 비회원에서 많이쓴다.

---------------------------------------------------------------------------------------------------------------
세션 (Session)
	내장 객체로서 브라우저마다 한 개씩 존재하고, 고유한 SessionID생성 후 정보를 추출한다. 

	장단점
		JSP에서만 접근할 수 있기 때문에 보안성이 좋고, 저장 용량의 한계가 거의 없다. 
		서버에 데이터를 저장하므로 서버에 부하가 걸릴 수 있다. 

*쿠키보다 세션을 쓰는 것이 더 안정적이지만 세션을 저장할 공간이 부족할 경우 쿠키가 사용된다. 
*삭제되거나 수정되어도 문제가 없는 데이터 혹은 개인의 고유한 정보들은 보통 쿠키를 사용한다. 
---------------------------------------------------------------------------------------------------------------
DBCP (DataBase Connection Pool)
	-RAM 어딘가 존재하는 Connection만 있는 pool
	
	사용자 요청이 있을 때마다 DB연결을 한다면 코드가 복잡해지며,
	많은 요청이 있을 때 연결속도가 저하될 수 있다. 따라서 미리 Connection 을
	만들어 두고, 필요 시 저장된 공간에서 가져다 쓴 후 반환하는 기법이다. 

JNDI (Java Naming and Directory Interface)
	디렉터리 서비스에서 제공하는 데이터 및 객체를 발견하고 참고하기 위한 자바 API이며,
	외부에 있는 객체를 가져오기 위한 기술이다. 

	dataSource라는 객체를 가져온다. (이건 자주씀 외우셈)

---------------------------------------------------------------------------------------------------------------








































