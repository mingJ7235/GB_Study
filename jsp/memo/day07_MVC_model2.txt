MVC
[model2]
								
								                전송방식
								    1.redirect 	    2.forward
	a.jsp 		--> web.xml		--> Front-Controller.java---------------------------->c.jsp
							   ↕
							   ↕
							   ↕
							   ↕
							   ↕
						        Controller.java
							   ↕
							   ↕
							   ↕
							   ↕
							   ↕
							 DAO
							   ↕
							   ↕
							   ↕
							   ↕
							   ↕
							   DB							

어떤 프론트 컨트롤러인지는 web.xml에서 결정
어떤 Controller인지는 프론트 컨트롤러에서 결정
프론트 컨트롤러는 Controller의 메소드들을 사용을 하는것이다. 
프론트 컨트롤러는 모든 Controller들을 제어하는 것임

Controller가 핵심 로직! DB조회, 연산, 응답방식, 응답 페이지등을 해준다!
Controller에는 request, response가 있어야한다. 
Controller안에 있는 메소드 -> execute( request , response ) 
execute() 에서 DAO객체를 통해 DB를 조회한다. (여기에 다 놓으면 소스코드가 길어지고, 분리가 안되므로!)
DAO라는 곳에 DB와 DB에 접속하는 메소드를 따로 모아서 모아놓는다. 
Controller에서는 DAO를 객체화하여 접근한다. 
※Controller에는 execute()메소드밖에없다. 

※전송방식을 정하는 것도 Controller에서 정하는 것이다. 

DAO에서 선언하고, Controller.java에서 사용하고,
Controller.java에서 선언하고 , Front-Controller.java에서 사용!!
=====================================================================
[MVC Model2 선생님 필기]

a.jsp에서 다음 페이지를 이동하기 전 필요한 비지니스 로직을 완벽히 분리하여 관리한다. 
사용자가 정의한 확장자(.me, .bo,...)를 페이지 이동 주소 (URL)에 작성하게 되면 서블릿이
web.xml에 가서 경로를 찾는다. 

※.me , .bo 등은 사용자 정의다. 이것에 알맞는 프론트 컨트롤러로 가라! 라는 지시가 web.xml에 있다. 
	이것을 substring을 써서 분기처리를 해서 알맞는 Controller에 꽂아주는 것이다. 

web.xml에 파일 경로를 하나씩 모두 만들게 되면 코드가 길어지기 때문에 
*.me (와일드카드 * 사용 / 앞에있는 * 부분은 프론트컨트롤러에서 분기처리. 뒤의 확장자만 걸러준다.) 
와일드 카드 방법을 사용해서 .me가 붙은 모든 요청을 하나의 경로로 보내주도록 설정해 놓는다. 
이 경로를 알맞는 Front-Controller.java경로로 설정해 놓는다. 

※ URL을 2번 필터링하는 과정이라고 생각하면 편하다. 우선 이 과정은 확장자를 걸러주기
	web.xml에서 Front-Controller로 갈때는 확장자로 걸러준다.

Front-Controller에서는 들어온 요청에 .me 앞의 요청명으로 (파일명)어떤 로직을 수행할 지를 판단하도록
분기처리를 한다. -> 즉, 이제 2번째 필터링!! 으로 파일명을 걸러준다.

비지니스 로직을 Front-Controller에서 작업하게 되면 마찬가지로 코드가 길어지고
유지보수 및 재사용이 어렵기 때문에 요청별 Controller(Action)를 만들어서 execute()메소드를 구현한다. 
따라서 execute()메소드를 모든 Controller(Action)에서 구현해야 하기 때문에 Action 인터페이스를 선언하여
추상메소드 형태로 execute()를 선언해 놓고 각 Controller(Action)에게 지정하여 구현하도록 한다. 

내부 작업이 모두 완료되면 페이지 이동을 할 것인지, 어떤 방식(위의 그림에서 redirect, forward)으로 전송할 것인지,
그리고 어디로 이동할 것인지를 결정해서 리턴해야 한다. 이에 관련된 필드를 ActionForward에 만들어 놓은 후
execute()메소드의 리턴 타입을 ActionForward로 지정하여 Controller(Action)의 execute()를 사용하는
Front-Controller에 리턴해준다.
Front-Controller에서는 ActionForward객체에 담긴 결과에 맞게 처리한 후 view로 이동하게 된다. 

위의 설명처럼 설계가 굉장히 복잡하기 때문에 대규모가 아닌 소규모 프로젝트에 반영했을 때에는
오히려 좋지 않은 결과를 초래한다. 따라서 맞는 목적으로 선택하여 설계해야한다. 

[model2의 전송방식 (redirect, forward)]

JSP와 Servlet에서 페이지 이동을 처리할 때 두 가지 방식 중 하나를 사용한다.
-Redirect
	Web Browser-->결제페이지 (현재페이지)-->새로고침 (뒤로가기)-->결제페이지 (새로운 페이지)
	
	기존의 있는 페이지의 정보를 아예 싹 날리고 새로운 session을 통해 새로운 페이지로 가는것임
	클라이언트가 요청했을 때 이전의 값이 남아있지 않도록 하기 위해 사용한다.
	
	ex> 회원가입, 글 작성, 결제 등	

-Forward
	기존의 페이지 정보가 그대로 남는다. 즉, 데이터를 유지할때
	'검색'할때 사용.
	검색하는 키워드를 누르고 검색결과 페이지로 가는데, 검색 데이터가 없어지면 안되잖슴!
	이럴때 Forward방식으로 사용함
	데이터를 넘겨야할때 사용한다!

	Web Browser-->검색페이지 (현재페이지)--> 검색 결과 페이지(검색한 키워드 값을 유지, 전달 되어야한다)

	클라이언트가 request객체를 통해 값을 넘겨주어야 할 때 혹은 단순 조회를 요청할 때 사용한다. 
	Redirect보다 성능이 좋다. 
	목록, 검색 등에서 사용. 




=========================
주석 순서
1.Action.java
2.ActionForward
3.web.xml
4.MemberFrontController
5.join.js
6.membercheckidokaction.java
7.memberjoinokaction.java










