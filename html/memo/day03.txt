<form>태그
	웹 페이지 내에서 사용자로부터 입력을 받을 때 사용하는 태그. (준비하는태그)
	사용자가 입력한 데이터를 다른 페이지로 전송할 때 form 태그를 사용한다.
	※li를 쓰기전 ul, ol 처럼 선행되는 준비되는 태그!	

	<form action="데이터를 전달할 URL혹은 페이지 경로" 
		method="전송방식" name="이름 (form태그를 구분)">
	
	</form>

	※method : get, post, delete, patch, put (JSP때 많이할 예정)
		get 방식: 속도가 빠름, action 에 쓴 경로가 브라우저에 뜨고,
		전송할 데이터가 옆에 또 뜸. 즉 사용자에게 전달할 데이터가 노출됨
		즉, 보안이 약함. 
		길이에 제한이 있음. 그렇기에 양이 많으면 get방식 쓰면안댐
		즉, 노출되도 되고 양이 적으면 get을 씀

		post방식 : Header라는 눈에 보이지않는 저장공간에 전송할 데이터를
		저장함. url이 전송될때 header에서 데이터를 가져옴
		보안이 강하고 길이의 제한이 없음. 다만 get보다 느리다. 
	
	※ action 과 method의 default값 
	action은 생략이 가능하고 생략하면 현재 페이지로 이동한다.
	method는 생략이 가능하고 생략하면 get방식이다. 

<input> 태그
	입력 받기 위해 사용되는 태그

	size : 글 상자의 크기 (값의 길이 X)
	maxlength : 값의 최대 길이
	placeholder : 사용자가 입력하기 전에 미리 보여줄 메세지
	readonly : 수정할 수 없도록 하는 설정
	value : 미리 값을 지정 (파라미터의 value값) *
	required : 필수 항목
	name : 요소의 이름을 설정 (파라미터의 KEY값) *


type 값
	<input type ="값">
	
	*text : 텍스트 입력 (작성한 텍스트가 눈으로 보임)
	*password : 텍스트 입력 (작성한 텍스트가 눈에 안보임)
	*radio : 여러 개 중 하나의 옵션만 선택 가능 (동그라미)
	*checkbox : 여러 개 중 다수의 옵션 선택 가능 
	*file : 파일전송 (첨부 파일에서 사용)
	color : 원하는 색상을 정의
	*email : 이메일 입력 (골뱅이 포함)
	url : http://로 입력
	tel : 핸드폰 번호 입력
	*date : 날짜 입력 (브라우저별로 달력 UI가 다름)
	number, min, max, step : 숫자입력 (수치를 조절 할 수 있는 상하 버튼 생성)
	range : 일정 범위 안의 값만 입력
	search : 검색어를 입력 (X버튼이 생겨서 전체 삭제 기능 지원)
	*button, submit, reset : 버튼 (참고.<button> 태그도 있음. 차이가있음. later)

	※ *체크한 것 위주로 많이 쓰인다. 

선택 입력
	select 요소는 여러 개의 옵션이 드롭다운 리스트로 되어 있으며,
	그 중에서 단 하나의 옵션만을 입력받을 수 있다.
	option요소는 드롭다운 리스트에서 선택할 수 있는 각각의 옵션을 명시한다.

	<select name "KEY값">
		<option value="실제 값(개발자가 보는 값)">표현 값(사용자가 보는값)</option>
		<option value="실제 값">표현 값</option>
		....
	</select>

문장 입력
	textarea 요소는 사용자로부터 여러 줄의 텍스트를 입력받을 수 있다.
	<textarea cols = "가로글자수크기" rows = "세로글자수크기">
			실제값 </textarea>

datalist
	form요소에서 미리 지정된 옵션 목록을 제공.
	사용자들이 특정 글자를 입력하면 그에 해당하는 미리 지정된 목록을 보여준다.
	
	<input type = "text" list = 'datalist id값'>

	<datalist id = "datalist id값">
		<option value = "실제 값1" label = "표기할 값1"></option>
		<option value = "실제 값2" label = "표기할 값2"></option>
		...
	</datalist>

진행 정도
	progress 태그를 이용하면 진행 정도를 나타낼 수 있다.
	<progress value="현재 값" max="최대 값"></progress>

fieldset
	fieldset요소는 관련 있는 폼 필드 세트를 표시한다.
	form필드 세트는 form내에서 관련 컨트롤을 하나의 그룹으로 묶은 것을 의미한다.
	
legend
	fieldset 요소의 제목을 표시.
	묶음에 대한 설명을 할 때 사용한다. 
	
-----------------------------------------------------------------------------
CSS (스크립트 언어)
	CSS 는 Cascading Style Sheets의 약자이다. 
	CSS는 HTML요소들이 각종 미디어에서 어떻게 보이는 가를 정의하는 데
	사용되는 스타일 시트 언어이며, 
	스타일을 HTML문서로부터 따로 분리하는 것이 가능해진다.

	개발은 분업이 핵심이다. ! 따로 분리!! 

CSS를 사용하는 이유
	HTML만으로 웹페이지를 제작할 경우 HTML요소의 세부 스타일을
	일일이 따로 지정해 주어야 하기 때문에 많은 시간이 걸리며,
	완성한 후에도 스타일의 변경 및 유지보수가 매우 힘들어진다.
	이 문제점을 해소하기 위해서 W3C에서 만든 스타일 시트 언어가 바로 CSS이다.
	웹 페이지의 스타일을 별도의 파일로 저장할 수 있게 해줌으로써 사이트의
	전체 스타일을 손쉽게 제어할 수 있게 된다. 
	또한 웹 사이트의 스타일을 일관성 있게 유지할 수 있도록 해주며, 
	그에 따른 유지보수 또한 쉬워진다. 

우리는 백엔드 + 퍼블리셔를 공부한다. 개쩐다!

CSS 문법
	P { text-align:center; color:blue; }
          1--- 2--------- 3------ 4-----5 ----
               6-------------------------------        

	1: 선택자
	2, 4: 속성명 (약속된 속성들만사용가능)
	3, 5: 속성값 (약속된 속성값만 사용가능)
	6: 선언부 (중괄호부분)

	CSS 문법 : 선택자와 선언부가 합쳐진 것이 CSS의 문법이다!	

1) CSS의 문법은 선택자와 선언부로 구성된다.
2) 선택자는 CSS를 적용하고자 하는 HTML요소를 가리키고
    선언부는 중괄호({})를 사용하여 전체를 둘러싼다.
3) 각 선언은 CSS속성명과 속성값을 가지고, 콜론( : )으로 연결된다.
4) CSS선언은 언제나 마지막에 세미콜론( ; )으로 끝마친다.


CSS주석
	주석을 표시할 때에는 /* */ 사이에 내용을 입력한다. 
	예) p {color:blue;} /* 글자 색상은 파란색입니다.  */

-----------------------------------------------------------------------------------
CSS 선택자

1. 전체 선택자 (*)
	스타일을 모든 요소에 적용할 때 사용한다.
	주로 모든 하위 요소에 한꺼번에 스타일을 적용할 때 사용하고
	전체 선택자는 asterisk(*) 기호를 사용한다. 





























